# Copyright 2020 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Rules for auto-generating the Paths_* module needed in third-party.

Some third-party Haskell packages use a Paths_{package_name}.hs file
which is auto-generated by Cabal.  That file lets them
- Get the package's current version number
- Find useful data file

This file exports the "cabal_paths" rule for auto-generating that Paths module.
For usage information, see the below documentation for that rule.
"""

def _impl_path_module_gen(ctx):
    base_dir = ctx.label.package + (
        ("/" + ctx.attr.data_dir) if ctx.attr.data_dir else ""
    )

    ctx.actions.expand_template(
        template = ctx.file._template,
        output = ctx.outputs.out,
        substitutions = {
            "%{module}": "Paths_" + ctx.attr.package,
            "%{base_dir}": base_dir,
            "%{version}": str(ctx.attr.version),
        },
    )
    return [DefaultInfo(files = depset([ctx.outputs.out]))]

cabal_paths = rule(
    implementation = _impl_path_module_gen,
    attrs = {
        "out": attr.output(mandatory = True),
        "data_dir": attr.string(),
        "package": attr.string(),
        "version": attr.int_list(mandatory = True, allow_empty = False),
        "_template": attr.label(
            allow_single_file = True,
            default = Label(
                "//bzl/cabal_package:paths.template",
            ),
        ),
    },
)
"""Generate a Cabal Paths_* module.

Generates a Paths_ module for use by Cabal packages.

Example usage:

    haskell_binary(
    name = "hlint",
    srcs = [":paths"],
    )

    cabal_paths(
        name = "paths",
        package = "hlint",
        version = [1, 18, 5],
        # Corresponds to the Cabal "data-dir" field.
        data_dir = "datafiles",
    )


Args:
    name: The name of the resulting library target.
    package: The name (string) of the Cabal package that's being built.
    data_dir: The subdirectory (relative to this package) that contains the
    data files (if any).  If empty, assumes the data files are at the top
    level of the package.
    data: The data files that this package depends on to run.
    version: The version number of this package (list of ints)
    **kwargs: Additonal parameters to the haskell_library.
"""
